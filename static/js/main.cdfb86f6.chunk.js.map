{"version":3,"sources":["components/Square.js","components/Board.js","App.js","index.js"],"names":["Square","Button","variant","style","fontSize","borderRadius","maxWidth","maxHeight","minWidth","minHeight","id","this","props","index","color","value","onClick","Component","Board","i","val","squares","handleClick","className","renderSquare","App","state","initialState","whoMoves","Array","fill","winner","gameType","setState","num","computerMove","newSquares","player","alert","calculateWinner","nextPlayer","isEmtpySpot","some","el","emptySquares","forEach","push","setTimeout","randomIndex","Math","floor","random","length","lines","a","b","c","status","gameTypeText","AppBar","position","Toolbar","Typography","align","flexGrow","Box","textAlign","selectGameType","startIcon","endIcon","reset","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cdfb86f6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Square extends Component {\r\n\r\n  render() {\r\n    const style={\r\n        fontSize: 30,\r\n        borderRadius: 0,\r\n        maxWidth: '50px',\r\n        maxHeight: '50px',\r\n        minWidth: '50px',\r\n        minHeight: '50px'\r\n    }\r\n    return (\r\n    <Button variant=\"contained\" style={style}\r\n        id={this.props.index}\r\n        color={this.props.value === 'X' ? 'primary' :\r\n            this.props.value === 'O' ? 'secondary' : 'default'}\r\n        onClick={() => this.props.onClick()}>\r\n\r\n        {this.props.value || ''}\r\n    </Button>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component }  from 'react';\r\nimport Square from './Square';\r\n\r\nclass Board extends Component {\r\n    renderSquare(i) {\r\n        const val= this.props.squares[i];\r\n        return <Square\r\n            value={val}\r\n            onClick={() => this.props.handleClick(i)}\r\n            index={i}\r\n        />\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"board\">\r\n                <div className='board-row'>\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className='board-row'>\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className='board-row'>\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport ComputerIcon from '@material-ui/icons/Computer';\n\nimport AccessibilityIcon from '@material-ui/icons/Accessibility';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super();\n    this.state = this.initialState();\n  }\n\n  initialState () {\n    return {\n      whoMoves: 'X',\n      squares: Array(9).fill(null),\n      winner: null,\n      gameType: null\n    };\n  }\n\n  reset () {\n    this.setState(this.initialState())\n  }\n\n  // gameType 1 - means 1 player vs computer\n  // gameType 2 - means 2 players\n  // gameType 3 - means computer vs computer\n  selectGameType (num) {\n    this.setState({gameType: num})\n  }\n\n  componentDidUpdate() {\n    // handle case for bot vs. bot\n    // and for case bot vs player - if it's bot's turn\n    if (this.state.gameType === 3 || (this.state.gameType === 1 && this.state.whoMoves === 'O')) {\n      this.computerMove(this.state.squares, this.state.whoMoves);\n    }\n  }\n\n  handleClick(i) {\n    const newSquares = this.state.squares;\n    const player = this.state.whoMoves;\n    const gameType = this.state.gameType;\n\n    // no action without first selecting the gameType\n    if (!gameType) {\n      alert('Please select type of game.');\n      return\n    }\n\n    // no action if gameType = 3 (computer vs computer)\n    if (gameType === 3) {\n      alert('Game for 2 bots. Just watch.');\n      return\n    }\n\n    // no action if game over\n    if (this.state.winner) {\n      alert('Game over! Winner is ' + this.state.winner);\n      return\n    }\n\n    // no action if clicked on occupied square\n    if (newSquares[i]) {\n      return\n    }\n\n    // no action if it's not player's turn\n    if (player === 'O' && gameType === 1) {\n      alert('Please wait for your turn!');\n      return;\n    }\n\n    // places a mark, check winner, change turns\n    newSquares[i] = player;\n    const winner = this.calculateWinner(newSquares);\n    const nextPlayer = player === 'X'? 'O' : 'X';\n\n    this.setState({\n        whoMoves: nextPlayer,\n        squares: newSquares,\n        winner: winner\n    })\n  }\n\n  computerMove(squares, player) {\n    let newSquares = squares;\n    const isEmtpySpot = newSquares.some(el => el === null);\n\n    // no move if game over or no empty spots available\n    if (this.state.winner || !isEmtpySpot) {\n      return\n    }\n\n    // select indexes with empty squares\n    let emptySquares = [];\n    newSquares.forEach((el, index) => el === null ? emptySquares.push(index) : null)\n\n    setTimeout(() => {\n      const randomIndex = Math.floor(Math.random() * emptySquares.length);\n      newSquares[emptySquares[randomIndex]] = player;\n\n      const winner = this.calculateWinner(newSquares);\n      const nextPlayer = player === 'X'? 'O' : 'X';\n\n      this.setState({\n        squares: newSquares,\n        whoMoves: nextPlayer,\n        winner: winner\n      })\n    }, 2000);\n}\n\n  calculateWinner(squares) {\n    const lines =\n      [[0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]];\n      for (let i = 0; i< lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] &&\n            squares[a] === squares[c]) {\n              return squares[a];\n        }\n      }\n      return null;\n  }\n\n  render() {\n    const winner = this.calculateWinner(this.state.squares);\n    const isEmtpySpot = this.state.squares.some(el => el === null);\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else if (!isEmtpySpot) {\n        status = 'It\\'s a draw!';\n      } else {\n        status = 'Next player: ' + this.state.whoMoves;\n    }\n    const gameTypeText = this.state.gameType === 1 ?\n      'player vs computer' :\n      this.state.gameType === 2? 'player vs player' :\n      this.state.gameType === 3? 'bot vs bot' : null;\n\n    if (!gameTypeText) {\n      status = 'Please select type of game.'\n    }\n    return (\n      <div className=\"App\">\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant='h3' align='center' style={{flexGrow: 1}}>\n              <Box textAlign=\"center\">TicTacToe</Box>\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        {/* only display at the start of the game*/}\n        {!this.state.gameType &&\n          <div className=\"GameType\">\n            <Button variant=\"contained\" color='secondary'\n              onClick= {() => this.selectGameType(2)}\n              startIcon={<AccessibilityIcon/>}\n              endIcon={<AccessibilityIcon/>}> vs </Button>\n            <Button variant=\"contained\" color='primary'\n              onClick= {() => this.selectGameType(1)}\n              startIcon={<AccessibilityIcon/>}\n              endIcon={<ComputerIcon />}> vs </Button>\n            <Button variant=\"contained\" color='default'\n              onClick= {() => this.selectGameType(3)}\n              startIcon={<ComputerIcon/>}\n              endIcon={<ComputerIcon />}> vs </Button>\n          </div>\n        }\n\n        <Typography variant='h5'>\n          {gameTypeText &&\n            <Box className='game-info' textAlign='center'>Game: {gameTypeText}</Box>}\n          <Box className='game-info' textAlign=\"center\">{status}</Box>\n        </Typography>\n\n        <div className='game'>\n          <Board\n            squares={this.state.squares}\n            handleClick={(i)=> this.handleClick(i)}\n          />\n          <Button variant=\"contained\" className=\"reset\" onClick= {() => this.reset()}> Reset </Button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}